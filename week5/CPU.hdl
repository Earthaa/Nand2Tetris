// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    //A-Register
    Mux16(a=instruction, b=ALUOutput, sel=instruction[15], out=ARegisterInput);//ALUOutput may change
    //Change if A-instruction or if C-instruction let A change
    Not(in=instruction[15], out=isAInstruction);
    Or(a=isAInstruction, b=instruction[5], out=changeARegister);
    ARegister(in=ARegisterInput, load=changeARegister, out=ARegisterOutput);

    //D-Register change if not A-instruction and C-instruction let it change
    And(a=instruction[15], b=instruction[4], out=changeDRegister);
    DRegister(in=ALUOutput, load=changeDRegister, out=DRegisterOut);//ALUOutput may change

    //A-Register or M-Register

    Mux16(a=ARegisterOutput, b=inM, sel=instruction[12], out=ALUSecondInput);
    //ALU part
    ALU(x=DRegisterOut, y=ALUSecondInput, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUOutput, zr=isZero, ng=isNegative);
    //Deal with the output of CPU
    And(a=instruction[3], b=instruction[15], out=writeM);
    Or16(a=ALUOutput, b=false, out=outM);

    Helper(A=ARegisterOutput,out=addressM);
    //Deal with PC
    
    //load bit 
    
    Or(a=isZero, b=isNegative, out=zeroOrNegative);
    Not(in=zeroOrNegative, out=notzeroOrNegative);
    //GreaterSatisfy
    And(a=instruction[0], b=notzeroOrNegative, out=greaterSatisfy);
    //NegativeSatisfy
    And(a=isNegative, b=instruction[2], out=lessSatisfy);
    //ZeroSatisfy
    And(a=isZero, b=instruction[1], out=zeroSatisfy);

    Or(a=greaterSatisfy, b=zeroSatisfy, out=greaterAndZero);
    Or(a=greaterAndZero, b=lessSatisfy, out=isSatisfy);
    //C-Instruction Satisfy
    And(a=instruction[15], b=isSatisfy, out=loadNew);
    Not(in=loadNew, out=shouldInc);
    
    PC(in=ARegisterOutput, load=loadNew, inc=shouldInc, reset=reset, out=pcout);
    Helper(A=pcout,out=pc);
    
}